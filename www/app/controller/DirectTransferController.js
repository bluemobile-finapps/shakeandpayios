/*
 * File: app/controller/DirectTransferController.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Finappsparty.controller.DirectTransferController', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            logoutButton: '#logoutButton',
            searchTransferButton: '#searchTransferButton'
        },

        control: {
            "#directTransfer": {
                initialize: 'onDirectTransferInitialize'
            },
            "#accountCarousel": {
                activeitemchange: 'onAccountCarouselActiveItemChange'
            },
            "searchTransferButton": {
                tap: 'onSearchTransferTap'
            },
            "logoutButton": {
                tap: 'onLogoutButtonTap'
            },
            "#cardsButton": {
                tap: 'onCardsButtonTap'
            }
        }
    },

    onDirectTransferInitialize: function(component, options) {
        this.initView();
    },

    onAccountCarouselActiveItemChange: function(container, value, oldValue, options) {
        this.setAccount(container);
    },

    onSearchTransferTap: function(button, e, options) {
        this.searchTransfer();
    },

    onLogoutButtonTap: function(button, e, options) {
        this.getApplication().getController('LoginController').showLogin();
    },

    onCardsButtonTap: function(button, e, options) {
        this.getApplication().getController('MainController').changeView('cardPanel');
    },

    createAccountSelectCarousel: function() {
        var store = Ext.getStore('Account');
        var n = store.data.items.length;
        if (n !== 0) {
            // Se selecciona automáticamente la primera cuenta
            Ext.getCmp('accountHiddenField').setValue(store.data.getAt(0).data.id);
            // Se crean los contenedores con los números de cuenta
            for (var i=0;i!=n;i++) {
                var data = store.data.getAt(i).data;
                var cls = 'positive';
                if (data.balance < 0) {
                    cls = 'negative';
                }
                var html = '<div class="account">'+data.accountNumber+'</div><div class="balance '+cls+'">'+data.actualBalance+' €</div>';
                var container = Ext.create('Ext.Container',{
                    html: html,
                    cls: 'accountSelectCarousel'
                });
                Ext.getCmp('accountCarousel').add(container);
            }
        }
    },

    searchTransfer: function() {
        var me = this;
        /*
        Ext.Viewport.setMasked({
        xtype: 'loadmask',
        message: 'obteniendo localizacion ...'
        });

        Ext.device.Geolocation.getCurrentPosition({
        success: function(position) {
        console.log(position.coords);
        send(position);
        },
        failure: function() {
        console.log('something went wrong!');
        send();
        }
        });

        var send = function(position) {
        var lat = 0;
        var lon = 0;
        if (position !== null) {
        lat = position.coords.latitude;
        lon = position.coords.longitude;
        }
        Ext.getCmp('latField').setValue(lat);
        Ext.getCmp('lonField').setValue(lon);
        Ext.Viewport.setMasked(false);
        if (me.isPayer()) {
        me.searchPayee();
        } else {
        me.searchPayer();    
        }
        };
        */

        Ext.getCmp('latField').setValue(0);
        Ext.getCmp('lonField').setValue(0);

        if (me.isPayer()) {
            me.searchPayee();
        } else {
            me.searchPayer();    
        }
    },

    isPayer: function() {
        return (Ext.getCmp('amountField').getValue() !== null);
    },

    responseSearchBeneficiary: function(result, panel) {
        var payerAccount = Ext.getCmp('accountHiddenField').getValue();
        var amount = Ext.getCmp('amountField').getValue();
        var data = result.data;
        data.payerAccount = payerAccount;
        data.amount = amount;
        data.operationId = result.operationId;
        panel.setData(data);
        Ext.Viewport.add(panel);
        panel.show();
    },

    responseSearchPayer: function(result, panel) {
        var beneficiaryAccount = Ext.getCmp('accountHiddenField').getValue();
        var data = result.data;
        data.beneficiaryAccount = beneficiaryAccount;
        data.operationId = result.operationId;
        panel.setData(data);
        Ext.Viewport.add(panel);
        panel.show();
    },

    searchPayee: function() {
        if (this.validateTransfer()) {
            var me = this;

            var urlService = this.getApplication().getController('UrlController').getSearchPayeeUrl();
            var panel = this.getApplication().getController('MainController').getView('payerPanel');

            Ext.Viewport.setMasked({
                xtype: 'loadmask',
                message: 'Searching<br/>payee ...'
            });

            Ext.getCmp('directTransfer').submit({
                url: urlService,
                disableCaching: false,
                success: function(form, result) {
                    me.responseSearchBeneficiary(result, panel);
                    Ext.Viewport.setMasked(false);
                },
                failure: function(form, result) {
                    Ext.Viewport.setMasked(false);
                    Ext.Msg.alert('Warning', 'Unable to perform the request, please try again');
                }
            });
        } else {
            Ext.Msg.alert('Warning', 'Not enough money');
        }
    },

    searchPayer: function() {
        var me = this;

        var urlService = this.getApplication().getController('UrlController').getSearchPayerUrl();
        var panel = this.getApplication().getController('MainController').getView('beneficiaryPanel');

        Ext.Viewport.setMasked({
            xtype: 'loadmask',
            message: 'Searching<br/>payer ...'
        });

        Ext.getCmp('directTransfer').submit({
            url: urlService,
            disableCaching: false,
            success: function(form, result) {
                me.responseSearchPayer(result, panel);
                Ext.Viewport.setMasked(false);
            },
            failure: function(form, result) {
                Ext.Viewport.setMasked(false);
                Ext.Msg.alert('Warning', 'Unable to perform the request, please try again');
            }
        });
    },

    validateTransfer: function() {
        return true;
        /*
        var store = Ext.getStore('Account');
        var accountCarousel = Ext.getCmp('accountCarousel');
        var balance = store.data.getAt(accountCarousel.getActiveIndex()).data.actualBalance;
        var amount = Ext.getCmp('amountField').getValue();
        return balance > amount;
        */
    },

    setAccount: function(container) {
        var store = Ext.getStore('Account');
        Ext.getCmp('accountHiddenField').setValue(store.data.getAt(container.getActiveIndex()).data.accountNumber);
    },

    initView: function() {
        Ext.getCmp('directTransfer').reset();
        var userData = Ext.getStore('User').getData().getAt(0).data;
        Ext.getCmp('userIdField').setValue(userData.id);
        Ext.getCmp('userNameField').setValue(userData.firstName);
        Ext.getCmp('userLastnameField').setValue(userData.lastName);
        this.createAccountSelectCarousel();
    },

    changeButtonSearchTransfer: function() {
        if (Ext.getCmp('amount').getValue() !== '') {
            Ext.getCmp('searchTransferButton').setUi('decline');
        } else {
            Ext.getCmp('searchTransferButton').setUi('confirm');
        }
    }

});